import React, { forwardRef } from "react";
import { mergeStyles, getShadow, isWeb } from "@/utils";

export const withStyleProps = (Component, defaultProps = {}) =>
  forwardRef((props, ref) => {
    const {
      display,
      flex,
      direction,
      self,
      grow,
      justify,
      align,
      center,
      w,
      minW,
      maxW,
      h,
      minH,
      maxH,
      roundness,
      bw,
      bc,
      bs,
      bg,
      p,
      ph,
      pv,
      pt,
      pr,
      pb,
      pl,
      m,
      mh,
      mv,
      mt,
      mr,
      mb,
      ml,
      style,
      children,
      fontSize,
      fontFamily,
      size,
      color,
      filter,
      position,
      top,
      left,
      bottom,
      right,
      shadowOffset,
      shadowOpacity = 0,
      shadowRadius = 0,
      elevation = 0,
      boxShadow,
      bbc,
      bbw,
      fw,
      textAlign,
      zIndex,
      transform,
      userSelect,
      visibility,
      transitionDelay,
      transitionDuration,
      transitionProperty,
      transitionTimingFunction,
      overflow,
      hide,
      opacity,
      wrap,
      transition,
      innerRef,
      ...rest
    } = { ...defaultProps, ...props };
    const s = mergeStyles(
      isWeb() && transition && { transition },
      transitionDelay && { transitionDelay },
      transitionDuration && { transitionDuration },
      transitionProperty && { transitionProperty },
      transitionTimingFunction && { transitionTimingFunction },
      fontFamily && { fontFamily },
      visibility && { visibility },
      userSelect && { userSelect },
      transform && { transform },
      zIndex && { zIndex },
      textAlign && { textAlign },
      fw && { fontWeight: fw },
      bbc && { borderBottomColor: bbc },
      bbw && { borderBottomWidth: bbw },
      boxShadow && { boxShadow },
      elevation && { ...getShadow(elevation) },
      top && { top },
      left && { left },
      bottom && { bottom },
      right && { right },
      position && { position },
      display && { display },
      shadowOffset && { shadowOffset },
      shadowOpacity && { shadowOpacity },
      shadowRadius && { shadowRadius },
      flex && { flex },
      color && { color },
      direction && { flexDirection: direction },
      fontSize && { fontSize },
      size && { height: size, width: size },
      filter && { filter },
      self && { alignSelf: self },
      grow && { flexGrow: grow },
      justify && { justifyContent: justify },
      align && { alignItems: align },
      center && { justifyContent: "center", alignItems: "center" },
      w && { width: w },
      minW && { minWidth: minW },
      maxW && { maxWidth: maxW },
      roundness && { borderRadius: roundness },
      bw && { borderWidth: bw },
      bc && { borderColor: bc },
      bg && { backgroundColor: bg },
      bs && { borderStyle: bs},
      h && { height: h },
      minH && { minHeight: minH },
      maxH && { maxHeight: maxH },
      p && { padding: p },
      ph && { paddingHorizontal: ph },
      pv && { paddingVertical: pv },
      pt && { paddingTop: pt },
      pr && { paddingRight: pr },
      pb && { paddingBottom: pb },
      pl && { paddingLeft: pl },
      m && { margin: m },
      mh && { marginHorizontal: mh },
      mv && { marginVertical: mv },
      mt && { marginTop: mt },
      mr && { marginRight: mr },
      mb && { marginBottom: mb },
      ml && { marginLeft: ml },
      overflow && { overflow },
      hide && { display: "none" },
      opacity && { opacity },
      wrap && { flexWrap: wrap },
      style
    );
    return (
      <Component ref={innerRef || ref} style={s} {...rest}>
        {children}
      </Component>
    );
});
